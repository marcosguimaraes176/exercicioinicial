import streamlit as st
import pandas as pd
import io
import openpyxl

st.markdown("""
<style>
/* Zera o espa√ßamento abaixo dos subcabe√ßalhos (st.subheader) */
h3 {
    margin-bottom: 0px; 
    padding-top: 5px; 
}

/* Zera o espa√ßamento abaixo de st.dataframe (a tabela) */
.stDataFrame {
    margin-bottom: 0px; 
}

/* Zera o espa√ßamento abaixo de st.text (usado para o df.info) */
.stText {
    margin-bottom: 0px;
}

/* Ajusta a linha divis√≥ria (st.markdown("---")) */
hr {
    margin-top: 10px; 
    margin-bottom: 10px;
}
</style>
""", unsafe_allow_html=True)


st.title("fonte de dados")

st.write("1. Site do Programa M√∫sica na Rede")
st.markdown("https://musicanarede.fames.es.gov.br/")

st.write("2. Sistema de Gest√£o:")
st.text("SEGES - Sistema Estadual de Gest√£o Escolar")

# --- Configura√ß√£o da P√°gina e T√≠tulo (exemplo) ---
st.set_page_config(layout="wide")
st.title("üìä An√°lise Descritiva de M√∫ltiplas Bases de Dados")
st.markdown("---")

# Nomes dos arquivos
FILE_PROJETOS = "data/Projetos por Munic√≠pios.xlsx"
FILE_MUSICA = "data/Relat√≥rio M√∫sica na Rede1.xlsx" # ATEN√á√ÉO: Confirme este nome!

df_projetos = None
df_musica = None

# Carregamento da Primeira Tabela
try:
    st.info(f"Carregando {FILE_PROJETOS}...")
    df_projetos = pd.read_excel(FILE_PROJETOS)
except FileNotFoundError:
    st.error(f"üö® Erro: O arquivo '{FILE_PROJETOS}' n√£o foi encontrado.")
except Exception as e:
    st.error(f"üö® Erro ao carregar {FILE_PROJETOS}: {e}")

# Carregamento da Segunda Tabela
try:
    st.info(f"Carregando {FILE_MUSICA}...")
    df_musica = pd.read_excel(FILE_MUSICA)
except FileNotFoundError:
    st.error(f"üö® Erro: O arquivo '{FILE_MUSICA}' n√£o foi encontrado.")
except Exception as e:
    st.error(f"üö® Erro ao carregar {FILE_MUSICA}: {e}")


# --- 3. FUN√á√ÉO AUXILIAR PARA EXIBIR DADOS ---

def exibir_tabelas(df, titulo_principal):
    """
    Exibe as tr√™s visualiza√ß√µes (describe, head, info) para um dado DataFrame.
    """
    # Apenas exibe se o DataFrame foi carregado com sucesso
    if df is None:
        return
        
    st.header(f"Base: {titulo_principal}")

    # 1. Tabela Descritiva (describe)
    st.subheader("1. Estat√≠sticas Descritivas (describe)")
    
    # Prepara o describe para exibir colunas num√©ricas e categ√≥ricas
    try:
        df_descritivo = df.describe(include='all').T 
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel gerar o describe completo para **{titulo_principal}**. Exibindo apenas o num√©rico. Erro: {e}")
        df_descritivo = df.describe().T
        
    df_descritivo.index.name = 'Vari√°vel'
    
    st.dataframe(
        df_descritivo.reset_index(),
        use_container_width=True, 
        hide_index=True 
    )

    st.markdown("---") 

    # 2. Visualiza√ß√£o do Head (Organiza√ß√£o da Tabela Original)
    st.subheader("2. Visualiza√ß√£o dos Dados Originais (Primeiras Linhas)")
    st.dataframe(df.head(), use_container_width=True)

    st.markdown("---") 

    # 3. Informa√ß√µes da Estrutura (info)
    st.subheader("3. Tipos de Dados e Contagem de N√£o-Nulos (info)")

    # Captura e exibe o df.info()
    buffer = io.StringIO()
    df.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)
    
    st.markdown("---") # Separador final entre as grandes se√ß√µes


# --- 4. EXIBI√á√ÉO SEQUENCIAL DAS BASES ---

# Exibe a primeira base de dados
exibir_tabelas(df_projetos, "**Projetos por Munic√≠pios**")

# Adiciona um separador grande para diferenciar visualmente as duas bases
st.markdown("# üîî In√≠cio da Segunda Base de Dados")
st.markdown("---") 

# Exibe a segunda base de dados
exibir_tabelas(df_musica, "**Relat√≥rio M√∫sica na Rede** (Estudantes Atendidos)")

def exibir_analise_musica(df):
    """
    Combina o c√°lculo, o gr√°fico e a exibi√ß√£o das tabelas descritivas 
    da base M√∫sica na Rede em uma √∫nica chamada.
    """
    if df is None:
        return

    # A. C√ÅLCULO E GR√ÅFICO (Como definimos antes)
    st.header("Base: **Relat√≥rio M√∫sica na Rede** (Estudantes Atendidos)")
    
    # Colunas de interesse (ANOS)
    colunas_anos = ['2023', '2024', '2025']
    
    # --- C√ÅLCULO DO TOTAL GERAL ---
    try:
        total_geral = df[colunas_anos].sum().sum()
        st.subheader("üìà An√°lise de Atendimentos")
        st.metric(
            label="Total Geral de Estudantes Atendidos (2023-2025)", 
            value=f"{total_geral:,.0f}".replace(",", "_").replace(".", ",").replace("_", ".") # Formata√ß√£o Brasileira
        )
        st.markdown("---")

    except KeyError:
        st.warning(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel calcular o Total Geral. Verifique se as colunas {colunas_anos} existem.")
    except Exception as e:
         st.warning(f"‚ö†Ô∏è Ocorreu um erro inesperado no c√°lculo: {e}")


    # --- GERA√á√ÉO DO GR√ÅFICO DE EVOLU√á√ÉO ---
    st.subheader("Evolu√ß√£o Anual de Atendimentos por Projeto")

    try:
        coluna_projeto = 'Projeto' if 'Projeto' in df.columns else df.columns[0]
        df_plot = df[[coluna_projeto] + colunas_anos].set_index(coluna_projeto).T 
        st.line_chart(df_plot)
        st.caption(f"Cada linha representa a evolu√ß√£o de um item da coluna: '{coluna_projeto}' ao longo dos anos.")
        st.markdown("---")

    except Exception as e:
        st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel gerar o gr√°fico de linhas. Verifique as colunas.")

    
    # B. EXIBI√á√ÉO DAS TABELAS DESCRITIVAS (Agora dentro desta fun√ß√£o, eliminando a chamada externa)

    # 1. Tabela Descritiva (describe)
    st.subheader("1. Estat√≠sticas Descritivas (describe)")
    
    # ... [O restante do c√≥digo de exibi√ß√£o do describe, head e info, que j√° estava em exibir_tabelas, viria aqui]
    
    # Para ser conciso, usaremos a fun√ß√£o 'exibir_tabelas' para o restante das visualiza√ß√µes
    # NOTE: Isso pressup√µe que voc√™ s√≥ quer o gr√°fico/c√°lculo ANTES das 3 tabelas
    # Se voc√™ quiser o gr√°fico/c√°lculo no MEIO das 3 tabelas, o c√≥digo seria diferente.

    # 1. Tabela Descritiva (describe)
    st.subheader("1. Estat√≠sticas Descritivas (describe)")
    # ... [C√≥digo do Describe]
    
    # 2. Visualiza√ß√£o do Head (Organiza√ß√£o da Tabela Original)
    st.subheader("2. Visualiza√ß√£o dos Dados Originais (Primeiras Linhas)")
    # ... [C√≥digo do Head]
    
    # 3. Informa√ß√µes da Estrutura (info)
    st.subheader("3. Tipos de Dados e Contagem de N√£o-Nulos (info)")
    # ... [C√≥digo do Info]


# --- 4. EXIBI√á√ÉO SEQUENCIAL DAS BASES (FINAL) ---
# ... (Este √© o bloco que fica no fim do seu script, chamando as fun√ß√µes)
# exibir_tabelas(df_projetos, "**Projetos por Munic√≠pios**")
# st.markdown("#") 
# st.markdown("---") 
# exibir_analise_musica(df_musica) # Chamada √∫nica!